import sqlite3 as sq
from pathlib import Path
from modules.bot_base import bot
destination = Path(__file__).resolve().parent.parent

def sql_start():
    global base, cur
    base = sq.connect(database=f'{destination}/documents/database.db', check_same_thread=False)
    cur = base.cursor()
    if base:
        print('[–û–ö] - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!')
    base.execute("CREATE TABLE IF NOT EXISTS bank_of_appeals(stage TEXT, user_id TEXT, nickname TEXT, fullname TEXT, section TEXT, datetime TEXT PRIMARY KEY, appeal TEXT, status TEXT, phone TEXT)")
    base.execute("CREATE TABLE IF NOT EXISTS bank_of_admins(admin_id TEXT PRIMARY KEY)")
    base.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

async def sql_add_admin(state):
    async with state.proxy() as data:
        print(tuple(data.values()))
        cur.execute("INSERT OR REPLACE INTO bank_of_admins VALUES (?)", tuple(data.values()))
        base.commit()

# –ß—Ç–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö

async def sql_get_admin():
    response = cur.execute("SELECT admin_id FROM bank_of_admins;").fetchall()
    admins_list = []
    for i in response:
        for id in i:
            admins_list.append(id)
    return admins_list

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

async def sql_add_appeal(state):
    async with state.proxy() as data:
        print(tuple(data.values()))
        cur.execute("INSERT OR REPLACE INTO bank_of_appeals VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", tuple(data.values()))
        base.commit()       

# –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:

async def sql_stage_changer(identifier, stage):
    cur.execute(f"UPDATE bank_of_appeals SET stage = '{stage}' WHERE datetime = '{identifier}';")
    base.commit()

# –ß—Ç–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –í—ã–±–æ—Ä–∫–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º

async def sql_parse_all_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_all_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE (section = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è' OR section = '–ú–∏–≥—Ä–∞—Ü–∏—è' OR section = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã' OR section = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π' OR section = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞') AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_all_get_sorted_by_time_asc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE (section = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è' OR section = '–ú–∏–≥—Ä–∞—Ü–∏—è' OR section = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã' OR section = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π' OR section = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞') AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_mobilization_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_mobilization_get_sorted_by_time_asc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_migration_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–ú–∏–≥—Ä–∞—Ü–∏—è' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_migration_get_sorted_by_time_asc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–ú–∏–≥—Ä–∞—Ü–∏—è' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_employment_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_employment_get_sorted_by_time_asc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_consumer_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_consumer_get_sorted_by_time_asc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_another_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_another_get_sorted_by_time_asc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_cooperation_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_cooperation_get_sorted_by_time_asc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_suggestion_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_feedback_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE section = '–û—Ç–∑—ã–≤—ã' AND (stage = 'üü¢–ù–æ–≤–æ–µ' OR stage = 'üü°–í —Ä–∞–±–æ—Ç–µ') ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

async def sql_archive_get_sorted_by_time_desc():
    key_list = []
    response = cur.execute("SELECT datetime, fullname, stage FROM bank_of_appeals WHERE stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ' ORDER BY datetime DESC;").fetchall()
    for i in response:
        j = ''.join(i[0].split(' ')[slice(1, 2)])
        a = ''.join(i[0].split(' ')[slice(0, 1)])
        b = a.split('-')
        b.reverse()
        c = '.'.join(b)
        key_list.append(i[2]+' | '+c+' | '+j+' | '+i[1])
    return key_list

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏

async def sql_get_info(inbound_key):
    splitted_key = inbound_key.split(' | ')
    splitted_substr = splitted_key[1].split('.')
    splitted_substr.reverse()
    outbound_key = '-'.join(splitted_substr)+' '+splitted_key[2]
    response = cur.execute(f"SELECT status, phone, nickname, fullname, appeal, section, stage, datetime FROM bank_of_appeals WHERE datetime = '{outbound_key}';").fetchall()
    return response

# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–±–æ—Ä–∫–∏

async def sql_get_all_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_all_consultations_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE (section = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è' OR section = '–ú–∏–≥—Ä–∞—Ü–∏—è' OR section = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã' OR section = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π' OR section = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞') AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_mobilization_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_migration_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–ú–∏–≥—Ä–∞—Ü–∏—è' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_employment_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_consumer_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_another_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_cooperation_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_suggestion_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats

async def sql_get_feedback_stats():
    stats = cur.execute("SELECT COUNT(*) FROM bank_of_appeals WHERE section = '–û—Ç–∑—ã–≤—ã' AND stage = 'üî¥–ó–∞–≤–µ—Ä—à–µ–Ω–æ';").fetchall()
    return stats